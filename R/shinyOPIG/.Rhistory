cell.patient.info <- read_tsv(file = "patient_deconvolution/Data_patients_TSMF_20190125.tsv")
cell.patient.info2 <- cell.patient.info %>% select(orig.ident,Individual_Number,Individual_Sex) %>% column_to_rownames("orig.ident")
nrow(cell.patient.info2)
BS.spheroid <- AddMetaData(object = BS.spheroid, metadata = cell.patient.info2)
BS.spheroid <- SubsetData(BS.spheroid,cells.use = rownames(cell.patient.info2))
cell.type <- data.frame(res.1=as.character(0:9),cell.type=c(rep("hepatocyte",4),"macrophage",rep("hepatocyte",3),"cholangiocytes","stellated"))
cell.type_id <- BS.spheroid@meta.data %>% left_join(cell.type,by="res.1") #%>% dplyr::select(cell.type)
rownames(cell.type_id) <- rownames(BS.spheroid@meta.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
BS.spheroid <- AddMetaData(object = BS.spheroid, metadata = cell.type_id, col.name = "cell.type")
BS.spheroid <- RunTSNE(BS.spheroid, reduction.use = "cca.aligned", dims.use = 1:9, do.fast = F,perplexity=100,
exaggeration_factor=120, theta=0, seed.use = 12345,tsne.method = "Rtsne")
DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "cell.type",
vector.friendly = TRUE, pt.size = 0.5)  + theme(plot.title = element_text(hjust = 0.5))
#valid from code below
p3 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "cell.type",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
p4 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "res.1.5",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
p5 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "Individual_Number",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
p6 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "Individual_Sex",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
plot_grid(p3,p4,p5,p6,nrow = 2)
saveRDS(BS.spheroid,file = "BS_only_4Flo/BS_only_seurat.RDS",compress = "xz")
#### DEG by patients
# set identity to donors/patient
BS.spheroid <- SetAllIdent(BS.spheroid,id = "Individual_Number" )
#Individual_Number_1_vs_2 <- FindMarkers(BS.spheroid, ident.1 = "1", ident.2 = "2",print.bar = FALSE) # proof of concept
# get all pairwise combinations, half of the triangle
Individual_Number <- unique(BS.spheroid@meta.data$Individual_Number) %>% sort()
pariwised.combinations <- combn(Individual_Number,2) %>% t() %>% data.frame() %>% rename(ident.1=X1,ident.2=X2)
patients_vs_patient <- data.frame()
for (i in 1:nrow(pariwised.combinations)) {
combination <- paste0("Individual_Number_",pariwised.combinations[i,1],"_vs_",pariwised.combinations[i,2])
DEG <- FindMarkers(BS.spheroid, ident.1 = pariwised.combinations[i,1], ident.2 = pariwised.combinations[i,2],print.bar = T,logfc.threshold=0.0,random.seed = 12345)
DEG <- DEG %>% rownames_to_column("symbol") %>% mutate(ident.1_vs_ident.2=paste(combination),ident.1 = pariwised.combinations[i,1], ident.2 = pariwised.combinations[i,2])
patients_vs_patient <- rbind(patients_vs_patient,DEG)
}
saveRDS(patients_vs_patient,"BS_only_4Flo/patients_vs_patient_DEG.RDS",compress = "xz")
#patients_vs_patient %>% filter(p_val_adj<=0.05) %>% View()
# get average expression per patient in log10 + 1
avg.expression.cells <- log1p(AverageExpression(BS.spheroid, show.progress = T,add.ident="Individual_Sex"))
colnames(avg.expression.cells) <- paste0("donor_",colnames(avg.expression.cells))
head(avg.expression.cells)
write.csv(avg.expression.cells,"BS_only_4Flo/log1p_average_expression_per_patient.csv")
#Sanity check XIST
avg.expression.cells["XIST",] %>% t()%>% plot()
# scatter plots
ggplot(avg.expression.cells,aes(donor_1_X,donor_2_X))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
ggplot(avg.expression.cells,aes(donor_1_X,donor_3_Y))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
ggplot(avg.expression.cells,aes(donor_1_X,donor_4_Y))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
ggplot(avg.expression.cells,aes(donor_4_Y,donor_7_Y))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
BS_only_seurat <- readRDS("~/Dropbox/liverNetwork/data/Flo_data_BS_scRNA/BS_only_seurat.RDS")
BS = BS_only_seurat
p1 <- DimPlot(object = BS.spheroid, reduction.use = "cca", group.by = "stim",
pt.size = 0.5, do.return = TRUE)
p1 <- DimPlot(object = BS, reduction.use = "cca", group.by = "stim",
pt.size = 0.5, do.return = TRUE)
plot(p1)
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE,reduction.use = "cca)
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE,reduction.use = "cca")
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE)
BS <- RunPCA(BS, features = VariableFeatures(object = BS))
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 2, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 2, cells = 100, balanced = TRUE)
DimHeatmap(BS, dims = 1:2, cells = 100, balanced = TRUE)
DimHeatmap(BS, dims = 1:2, cells = 200, balanced = TRUE)
DimHeatmap(BS, dims = 1:2, cells = 300, balanced = TRUE)
DimHeatmap(BS, dims = 5, cells = 300, balanced = TRUE)
DimHeatmap(BS, dims = 5, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 12, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 5000, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 1000, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 800, balanced = TRUE)
DimHeatmap(BS, dims = 1:20, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 20, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 20, cells = 500, balanced = TRUE,nfeatures=100)
DimHeatmap(BS, dims = 20, cells = 200, balanced = TRUE,nfeatures=100)
DimHeatmap(BS, dims = 20, cells = 400, balanced = TRUE,nfeatures=100)
DimHeatmap(BS, dims = 20, cells = 400, balanced = TRUE,nfeatures=60)
DimHeatmap(BS, dims = 20, cells = 400, balanced = TRUE,nfeatures=600)
fitBUM(pValuesH1vsH3,plot=TRUE)
library(scPPIN)
fitBUM(pValuesH1vsH3,plot=TRUE)
setwd("~/GitHub/shinyTutorial/R/shinyOPIG")
shiny::runApp()
runApp()
opigPublication
runApp()
opigPublication <- read.delim("opigAuthorList.txt", header=TRUE, sep="\t")
opigPublication
separate(opigPublication)
library(tidyr)
separate(opigPublication)
separate(opigPublication,"and")
separate(opigPublication,sep="and")
separate(opigPublication,[1],sep="and")
separate(opigPublication,0,sep="and")
separate(opigPublication,1,sep="and")
separate(opigPublication,1,into=NA,sep="and")
strsplit(opigPublication[1])
strsplit(opigPublication[1],"and")
opigPublication[1]
opigPublication[0]
opigPublication[,1]
opigPublication[1,1]
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep="\t")
opigPublication[1]
opigPublication[1][1]
opigPublication[1][0]
opigPublication[0]
opigPublication[1]
opigPublication[2]
opigPublication[1][1]
opigPublication[1][2]
opigPublication[2]
opigPublication[2]
opigPublication[,1]
opigPublication
opigPublication[V1]
opigPublication['V1']
opigPublication['V1'][1]
opigPublication['V1'][2]
opigPublication.columns()
opigPublication.columns()
col(opigPublication.columns)
colnames(opigPublication.columns)
colnames(opigPublication)
str(opigPublication)
opigPublication$V1
opigPublication$V1[0]
opigPublication$V1[1]
opigPublication$V1[2]
opigPublication$V1[3]
opigPublication$V1[1]
strsplit(opigPublication$V1[1],and)
strsplit(opigPublication$V1[1],"and")
strsplit(char(opigPublication$V1[1]),"and")
opigPublication$V1[1]
typeof(opigPublication$V1[1])
runApp()
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep=";")
opigPublication
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep=";")
opigPublication
opigPublication[1]
opigPublication[,1]
opigPublication[,2]
opigPublication[,3]
opigPublication[1,]
opigPublication[2,]
opigPublication[3,]
len(opigPublication[3,])
occurences<-table(unlist(opigPublication))
occurences
unlist(opigPublication)
occurences<-table(unlist(opigPublication))
runApp()
faithful
occurences
runApp()
occurences
occurences<-table(unlist(opigPublication))
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep=";")
occurences<-table(unlist(opigPublication))
unlist(opigPublication)
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep=";")
occurences<-table(unlist(opigPublication))
occurences
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep=";")
occurences
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep=";")
opigPublication
opigPublication <- read.delim("opigAuthorList.txt", header=FALSE, sep=";",strip.white=TRUE)
occurences<-table(unlist(opigPublication))
occurences
runApp()
typeof(occurences)
occurences[" "]
occurences[5]
occurences[6]
sort(occurences)
occurences[10]
occurences
occurences[11]
occurences[12]
occurences[13]
occurences[14]
occurences[15]
occurences[16]
occurences[17]
occurences[18]
occurences[18]$name
occurences$names
name(occurences)
runApp()
names(occurences)
occurences[""]
occurences[" "]
occurences["""]
""
occurences[""]
occurences[names(occurences[18])]
names(occurences[18])
runApp()
occurences
occurences<-table(unlist(opigPublication))
occurences
sort(occurences,decreasing=TRUE)
occurences<- sort(occurences,decreasing=TRUE)
occurences
occurences[1] <- NULL
occurences[2:end
]
occurences[2:18
]
occurences[2:40
]
len(occurences)
length(occurences)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
occurrencesClean
x.
x
occurrences
opigPublication
table(opigPublication)
occurrences<-table(unlist(opigPublication)) # count the occurances
occurrences<- sort(occurrences,decreasing=TRUE) # sort them
occurrencesClean <- occurences[2:length(occurrences)] # we do not take the whitespace author name
table(occurrencesClean)
occurrencesClean
runApp()
runApp()
occurrencesClean
names(occurrencesClean)
runApp()
opigPublication
opigPublication[,1]
opigPublication[1,]
opigPublication[2,]
length(opigPublication[2,])
length(opigPublication[2,1])
length(opigPublication[2,2])
length(opigPublication[2,3])
length(opigPublication[2,])
opigPublication[2,1]
opigPublication[2,2]
ength(opigPublication)
length(opigPublication)
length(opigPublication[,1])
opigPublication[,2]
opigPublication[2,]
opigPublication[1,]
typeof(opigPublication[1,])
mylist <- opigPublication[1,]
mylist[vapply(mylist, Negate(is.null), NA)]
mylist <- opigPublication[2,]
mylist
mylist[vapply(mylist, Negate(is.null), NA)]
opigPublication[2,3]
opigPublication[2,4]
typeof(opigPublication[2,4])
typeof(opigPublication[2,3])
opigPublication[2,3]
names(opigPublication[2,3])
name(opigPublication[2,3])
opigPublication[2,3]
opigPublication[2,4]
opigPublication[2,6]
opigPublication[2,1]
opigPublication[2]
opigPublication[2,]
list()
runApp()
edgeFrom
# construct egdes from the author lists in an ugly triple for loop
edgeFrom <- list()
edgeTo <- list()
nPublications <- length(opigPublication[,1])
for (i in 1:nPublications){ # go over each publication
authorlistThisPublication <- opigPublication[i,]
nAuthors <- length(authorlistThisPublication)
# go pairwise over all authors in this paper
for (a1 in 1:nAuthors){
for (a2 in (a1+1):nAuthors){
append(edgeFrom, authorlistThisPublication[a1])
append(edgeTo, authorlistThisPublication[a2])
}
}
}
authorlistThisPublication
authorlistThisPublication[1]
authorlistThisPublication[2]
a1
nAuthors
1:nAuthors
authorlistThisPublication
authorlistThisPublication[1]
authorlistThisPublication[2]
authorlistThisPublication[3]
authorlistThisPublication[4]
authorlistThisPublication[8]
authorlistThisPublication[9]
authorlistThisPublication <- opigPublication[2,]
authorlistThisPublication
authorlistThisPublication[8]
nAuthors
runApp()
nPublications
runApp()
nPublications
nPublications
edgeTo
append(edgeTo,'hallo')
edgeTo
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
edgeFrom
authorlistThisPublication[a2])
authorlistThisPublication[a2]
authorlistThisPublication[1]
unlist(authorlistThisPublication[1])
typeof(authorlistThisPublication[1])
authorlistThisPublication[1]
authorlistThisPublication[1,1]
typeof(authorlistThisPublication[1,1])
typeof(authorlistThisPublication[1,1,1])
authorlistThisPublication[1]
authorlistThisPublication[1][V1]
nodes
edges
edgeTo
edgeTo$V1
edgeTo$V2
edgeTo$V3
unlist(edgeTo)
runApp('~/GitHub/IPSER/scPPIN-online')
runApp()
runApp()
edgeTo
edgeTo
authorlistThisPublication[1]
opigPublication[i,]
opigPublication[1,]
opigPublication[2,]
split(opigPublication[2,])
as.list(opigPublication[2,])
opigPublication
opigPublication$V1
opigPublication[,1]
opigPublication[1,]
opigPublication[2,]
ncol(opigPublication[2,])
as.list(opigPublication[2,])
edgeFrom
edgeFrom[1]
as.list(edgeFrom[1])
as.list(edgeFrom)
authorlistThisPublication[a1]
authorlistThisPublication[1]
authorlistThisPublication[1]$V1
authorlistThisPublication[1]$V2
as.list(authorlistThisPublication[1])
typeof(as.list(authorlistThisPublication[1]))
typeof(authorlistThisPublication[1])
typeof(unlist(authorlistThisPublication[1]))
typeof(opigPublication)
opigPublication
typeof(opigPublication[,1])
typeof(opigPublication[1,])
opigPublication[1,]
typeof(opigPublication[1,1])
typeof(name(opigPublication[1,1]))
typeof(names(opigPublication[1,1]))
(opigPublication[1,1]))
(opigPublication[1,1])
opigPublication
typeof(opigPublication)
print(opigPublication)
print(opigPublication[,1])
print(opigPublication[1,])
print(opigPublication[1,1])
authorlistThisPublication
typeof(authorlistThisPublication)
typeof(authorlistThisPublication[,1])
typeof(authorlistThisPublication[1,])
typeof(authorlistThisPublication[1,1])
runApp()
authorlistThisPublication
authorlistThisPublication[,1]
edgeFrom
edgeTo
runApp()
edgeFrom
edgeFrom[1]
edgeFrom[2]
typeof(edgeFrom)
typeof(edgeFrom[1])
edgeFrom[1]
edgeFrom[2]
edgeFrom[3]
edgeFrom[5]
edgeFrom[10]
edgeFrom[11]
edgeFrom[12]
authorlistThisPublication[1]
authorlistThisPublication[,1]
runApp()
runApp()
edges
edgeFrom
authorlistThisPublication[,a2]
authorlistThisPublication[,1]
authorlistThisPublication[[,1]]
authorlistThisPublication[,1]
typeof(authorlistThisPublication[,1])
typeof(authorlistThisPublication[,6])
authorlistThisPublication[,6]
authorlistThisPublication[,6].
authorlistThisPublication[,6]
runApp()
authorlistThisPublication[,6]
authorlistThisPublication[,6] ==""
authorlistThisPublication[,6] !=""
runApp()
runApp()
authorlistThisPublication[,a1]!=""
(authorlistThisPublication[,a2]!=""
authorlistThisPublication[,a1]!=""
TRUE && FALSE
TRUE && TRUE
runApp()
runApp()
runApp()
runApp()
runApp()
edges
edgeFrom
edgeTo
unlist(edgeTo)
runApp()
runApp()
unlist(edgeFrom)
length(unlist(edgeFrom))
length(unlist(edgeTo))
a1
a1
runApp()
edgeFrom
edgeTo
runApp()
identical(authorlistThisPublication[,a1],"")
authorlistThisPublication[,a1]
authorlistThisPublication[,a2]
!authorlistThisPublication[,a1]
identical(authorlistThisPublication[,a1],"")
!identical(authorlistThisPublication[,a1],"")
!identical(authorlistThisPublication[,a2],"")
!identical(authorlistThisPublication[,a2],"") && identical(authorlistThisPublication[,a1],"")
!identical(authorlistThisPublication[,1],"") && identical(authorlistThisPublication[,a1],"")
runApp()
edgeFrom
edgeTo
runApp()
authorlistThisPublication[,a1]
authorlistThisPublication
a1
a1
a2
a1
a1
a in 1:10
a in (1:10)
runApp()
author1
author2
runApp()
runApp()
runApp()
runApp()
names(occurrencesClean)
strsplit(names(occurrencesClean),",")
strsplit(names(occurrencesClean),",")[1]
strsplit(names(occurrencesClean),",")[,1]
runApp()
runApp()
runApp()
# this file just loads some R libraries to check whether they are sufficiently installed.
# installation
install.packages("shiny")
install.packages("visNetwork")
# load libraries
library(shiny)
library(visNetwork)
install.packages("shiny")
shiny::runApp()
runApp()
