BS_only_seurat <- readRDS("/Users/Florian/Dropbox/liverNetwork/data/Flo_data_BS_scRNA/BS_only_seurat.RDS")
install.packages("Seurat")
BS_only_seurat <- readRDS("/Users/Florian/Dropbox/liverNetwork/data/Flo_data_BS_scRNA/BS_only_seurat.RDS")
setwd("~/Documents/NNRCO/Transcriptomic_Analysis/20181210_N31_SC/")
library(tidyverse)
library(Seurat)
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
#function to fix duplicated barcodes in diferents lanes, without this mess it up bellow
add.label <- function(x,label){colnames(x) <- paste0(label,colnames(x))
return(x)}
# read data sets
bs.data <- Read10X(data.dir = "10X_output/BS/outs/filtered_gene_bc_matrices/hg19/")
bs.data <- add.label(bs.data,label = "BS")
bs.m.data <- Read10X(data.dir = "10X_output/BSme/outs/filtered_gene_bc_matrices/hg19/")
bs.m.data <- add.label(bs.m.data,label = "BS.me")
# Set up baseline object
bs <- CreateSeuratObject(raw.data = bs.data, project = "LiverSpheroids", min.cells = 5)
bs@meta.data$stim <- "BS"
bs <- FilterCells(bs, subset.names = "nGene", low.thresholds = 500, high.thresholds = 6000)
bs <- NormalizeData(bs)
bs <- ScaleData(bs, display.progress = F)
# with Macrophages
# Set up baseline object
bs.m <- CreateSeuratObject(raw.data = bs.m.data, project = "LiverSpheroids", min.cells = 5)
bs.m@meta.data$stim <- "BS.me"
bs.m <- FilterCells(bs.m, subset.names = "nGene", low.thresholds = 500, high.thresholds = 6000)
bs.m <- NormalizeData(bs.m)
bs.m <- ScaleData(bs.m, display.progress = F)
bs <- FindVariableGenes(bs, do.plot = F)
bs.m <- FindVariableGenes(bs.m, do.plot = F)
g.1 <- head(rownames(bs@hvg.info), 2000)
g.2 <- head(rownames(bs.m@hvg.info), 2000)
genes.use <- unique(c(g.1, g.2))
# Data aligment
genes.use <- intersect(genes.use, rownames(bs@scale.data))
genes.use <- intersect(genes.use, rownames(bs.m@scale.data))
bs@meta.data$group <- "BS"
bs.m@meta.data$group <- "BS.me"
#Add treatment to metadata
bs@meta.data$treatment <- "BS"
bs.m@meta.data$treatment <- "BS"
#Run CCA
object.merge <- list(bs, bs.m)
BS.spheroid <- RunCCA(object= bs,object2 = bs.m, genes.use = genes.use)
# visualize results of CCA plot CC1 versus CC2 and look at a violin plot
p1 <- DimPlot(object = BS.spheroid, reduction.use = "cca", group.by = "stim",
pt.size = 0.5, do.return = TRUE)
p2 <- VlnPlot(object = BS.spheroid, features.plot = "CC1", group.by = "stim",
do.return = TRUE)
plot_grid(p1, p2)
PrintDim(object = BS.spheroid, reduction.type = "cca", dims.print = 1:2,
genes.print = 10)
MetageneBicorPlot(BS.spheroid, grouping.var = "group", dims.eval = 1:20, display.progress = T)
# Align the CCA subspaces (first 10 dimensions)
BS.spheroid <- AlignSubspace(BS.spheroid, reduction.type = "cca", grouping.var = "group", dims.align = 1:9)
# We can visualize the un aligned CCA
p1 <- VlnPlot(object = BS.spheroid, features.plot = "CC1", group.by = "group",do.return = TRUE,point.size.use = 0.1)
p2 <- VlnPlot(object = BS.spheroid, features.plot = "CC2", group.by = "group",do.return = TRUE,point.size.use = 0.1)
p3 <- VlnPlot(object = BS.spheroid, features.plot = "CC3", group.by = "group",do.return = TRUE,point.size.use = 0.1)
p4 <- VlnPlot(object = BS.spheroid, features.plot = "CC4", group.by = "group",do.return = TRUE,point.size.use = 0.1)
plot_grid(p1, p2, p3, p4)
# We can visualize the aligned CCA and perform an integrated analysis.
p1 <- VlnPlot(object = BS.spheroid, features.plot = "ACC1", group.by = "group",do.return = TRUE,point.size.use = 0.1)
p2 <- VlnPlot(object = BS.spheroid, features.plot = "ACC2", group.by = "group",do.return = TRUE,point.size.use = 0.1)
p3 <- VlnPlot(object = BS.spheroid, features.plot = "ACC3", group.by = "group",do.return = TRUE,point.size.use = 0.1)
p4 <- VlnPlot(object = BS.spheroid, features.plot = "ACC4", group.by = "group",do.return = TRUE,point.size.use = 0.1)
plot_grid(p1, p2, p3, p4)
# UMAP
BS.spheroid <- RunUMAP(object = BS.spheroid, reduction.use = "cca.aligned", dims.use = 1:9,seed.use = 1234,n_neighbors = 20)
p1 <- DimPlot(object = BS.spheroid, reduction.use = "umap", no.legend = F, do.return = TRUE,
vector.friendly = TRUE, pt.size = 0.1,group.by = "treatment") + ggtitle("UMAP") + theme(plot.title = element_text(hjust = 0.5))
p2 <- DimPlot(object = BS.spheroid, reduction.use = "umap", no.legend = F, do.return = TRUE,
vector.friendly = TRUE, pt.size = 0.1) + ggtitle("UMAP") + theme(plot.title = element_text(hjust = 0.5))
plot_grid(p1,p2)
# t-SNE and Clustering
BS.spheroid <- RunTSNE(BS.spheroid, reduction.use = "cca.aligned", dims.use = 1:9, do.fast = F,perplexity=100,
exaggeration_factor=120, theta=0, seed.use = 12345,tsne.method = "Rtsne")
DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "group",
vector.friendly = TRUE, pt.size = 0.5)  + theme(plot.title = element_text(hjust = 0.5))
BS.spheroid <- FindClusters(BS.spheroid, reduction.type = "cca.aligned",resolution = 1, dims.use = 1:9,force.recalc = T,save.SNN=T)
DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "ident",
vector.friendly = TRUE, pt.size = 0.5)  + theme(plot.title = element_text(hjust = 0.5))
VlnPlot(object = BS.spheroid, features.plot = "ALB",group.by = "ident", point.size.use = 0.1,do.return = T)
VlnPlot(object = BS.spheroid, features.plot = "MS4A7",group.by = "ident", point.size.use = 0.1,do.return = T)
VlnPlot(object = BS.spheroid, features.plot = "KRT19",group.by = "ident", point.size.use = 0.1,do.return = T)
VlnPlot(object = BS.spheroid, features.plot = "COL1A1",group.by = "ident", point.size.use = 0.1,do.return = T)
# Cell id ------
#BS.spheroid@meta.data$cell.type <- NULL
cell.type <- data.frame(res.1=as.character(0:9),cell.type=c(rep("hepatocyte",4),"macrophage",rep("hepatocyte",3),"cholangiocytes","stellated"))
cell.type_id <- BS.spheroid@meta.data %>% left_join(cell.type,by="res.1") #%>% dplyr::select(cell.type)
rownames(cell.type_id) <- rownames(BS.spheroid@meta.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
BS.spheroid <- AddMetaData(object = BS.spheroid, metadata = cell.type_id, col.name = "cell.type")
VlnPlot(object = BS.spheroid, features.plot = "ALB",group.by = "cell.type", point.size.use = 0.1,do.return = T)
VlnPlot(object = BS.spheroid, features.plot = "MS4A7",group.by = "cell.type", point.size.use = 0.1,do.return = T)
VlnPlot(object = BS.spheroid, features.plot = "KRT19",group.by = "cell.type", point.size.use = 0.1,do.return = T)
VlnPlot(object = BS.spheroid, features.plot = "COL1A1",group.by = "cell.type", point.size.use = 0.1,do.return = T)
DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "cell.type",
vector.friendly = TRUE, pt.size = 0.5)  + theme(plot.title = element_text(hjust = 0.5))
FeaturePlot(object = BS.spheroid, features.plot = c("ALB","MS4A7","KRT19","COL1A1"),reduction.use = "tsne",cols.use = jet.colors(10))
FeaturePlot(object = BS.spheroid, features.plot = c("CD63","FASN","HNF4A","GAA"),reduction.use = "tsne",cols.use = jet.colors(10))
#only hepatocytes
VlnPlot(object = BS.spheroid, features.plot = "HNF4A",group.by = "ident", point.size.use = 0.1,do.return = T,ident.include = c(0,1,2,3,5,6,7))
VlnPlot(object = BS.spheroid, features.plot = "SREBF2",group.by = "ident", point.size.use = 0.1,do.return = T,ident.include = c(0,1,2,3,5,6,7))
VlnPlot(object = BS.spheroid, features.plot = "DGAT2",group.by = "ident", point.size.use = 0.1,do.return = T,ident.include = c(0,1,2,3,5,6,7))
VlnPlot(object = BS.spheroid, features.plot = "ALB",group.by = "ident", point.size.use = 0.1,do.return = T,ident.include = c(0,1,2,3,5,6,7))
# Finding genes per clusters -----
genes.per.cluster.bs <- FindAllMarkers(object = BS.spheroid,print.bar = T,random.seed = 12345)
genes.per.cluster.bs_nofilter <- FindAllMarkers(object = BS.spheroid,print.bar = T,random.seed = 12345,logfc.threshold=0.0)
# genes.per.cluster.bs_t <- FindAllMarkers(object = BS.spheroid,print.bar = T,random.seed = 12345,test.use = "t")
# genes.per.cluster.bs_negbinom <- FindAllMarkers(object = BS.spheroid,print.bar = T,random.seed = 12345,test.use = "negbinom")
HP.markers <- FindConservedMarkers(BS.spheroid, ident.1 = c(0,1,2,3,5,6,7), grouping.var = "stim", print.bar = FALSE)
FeaturePlot(object = BS.spheroid, features.plot = c("MT1G","FGA","C19orf80","ASGR1"),reduction.use = "tsne",cols.use = jet.colors(10))
# Start - Stop POINT --------
# dir.create("BS_only_4Flo")
# saveRDS(BS.spheroid,file = "BS_only_4Flo/BS_only_seurat.RDS")
# write_csv(genes.per.cluster.bs,"BS_only_4Flo/genes_per_cluster_bs.csv")
BS.spheroid  <- read_rds("BS_only_4Flo/BS_only_seurat.RDS")
genes.per.cluster.bs <- read_csv("BS_only_4Flo/genes_per_cluster_bs.csv")
# #valid from code below
# p3 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "cell.type",
#               vector.friendly = TRUE, pt.size = 0.5)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
#
# p4 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "ident",
#               vector.friendly = TRUE, pt.size = 0.5)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
#
# plot_grid(p3,p4)
# Filter DEG genes
h <- c(0,1,2,3,5,6,7)
genes.per.cluster.bs %>% filter(cluster %in% h) %>% write_csv(path = "BS_only_4Flo/DEG_in_hepatocytes_clusters.csv")
genes.per.cluster.bs_nofilter %>% filter(cluster %in% h) %>% write_csv(path = "BS_only_4Flo/DEG_in_hepatocytes_clusters_nofilter_logfc.csv")
p1 <- DimPlot(object = BS.spheroid, reduction.use = "umap", no.legend = F, do.return = TRUE,
vector.friendly = TRUE, pt.size = 0.1,group.by = "cell.type") + ggtitle("UMAP") + theme(plot.title = element_text(hjust = 0.5))
p2 <- DimPlot(object = BS.spheroid, reduction.use = "umap", no.legend = F, do.return = TRUE,
vector.friendly = TRUE, pt.size = 0.1,group.by = "ident") + ggtitle("UMAP") + theme(plot.title = element_text(hjust = 0.5))
plot_grid(p1,p2)
#### Variant calling patients by Thomas ---
cell.patient.info <- read_tsv(file = "patient_deconvolution/Data_patients_TSMF_20190125.tsv")
cell.patient.info2 <- cell.patient.info %>% select(orig.ident,Individual_Number,Individual_Sex) %>% column_to_rownames("orig.ident")
nrow(cell.patient.info2)
BS.spheroid <- AddMetaData(object = BS.spheroid, metadata = cell.patient.info2)
BS.spheroid <- SubsetData(BS.spheroid,cells.use = rownames(cell.patient.info2))
cell.type <- data.frame(res.1=as.character(0:9),cell.type=c(rep("hepatocyte",4),"macrophage",rep("hepatocyte",3),"cholangiocytes","stellated"))
cell.type_id <- BS.spheroid@meta.data %>% left_join(cell.type,by="res.1") #%>% dplyr::select(cell.type)
rownames(cell.type_id) <- rownames(BS.spheroid@meta.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
BS.spheroid <- AddMetaData(object = BS.spheroid, metadata = cell.type_id, col.name = "cell.type")
BS.spheroid <- RunTSNE(BS.spheroid, reduction.use = "cca.aligned", dims.use = 1:9, do.fast = F,perplexity=100,
exaggeration_factor=120, theta=0, seed.use = 12345,tsne.method = "Rtsne")
DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "cell.type",
vector.friendly = TRUE, pt.size = 0.5)  + theme(plot.title = element_text(hjust = 0.5))
#valid from code below
p3 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "cell.type",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
p4 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "res.1.5",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
p5 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "Individual_Number",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
p6 <- DimPlot(object = BS.spheroid, reduction.use = "tsne", no.legend = F, do.return = TRUE, group.by = "Individual_Sex",
vector.friendly = TRUE, pt.size = 2)  + theme(plot.title = element_text(hjust = 0.5), legend.position = "top")
plot_grid(p3,p4,p5,p6,nrow = 2)
saveRDS(BS.spheroid,file = "BS_only_4Flo/BS_only_seurat.RDS",compress = "xz")
#### DEG by patients
# set identity to donors/patient
BS.spheroid <- SetAllIdent(BS.spheroid,id = "Individual_Number" )
#Individual_Number_1_vs_2 <- FindMarkers(BS.spheroid, ident.1 = "1", ident.2 = "2",print.bar = FALSE) # proof of concept
# get all pairwise combinations, half of the triangle
Individual_Number <- unique(BS.spheroid@meta.data$Individual_Number) %>% sort()
pariwised.combinations <- combn(Individual_Number,2) %>% t() %>% data.frame() %>% rename(ident.1=X1,ident.2=X2)
patients_vs_patient <- data.frame()
for (i in 1:nrow(pariwised.combinations)) {
combination <- paste0("Individual_Number_",pariwised.combinations[i,1],"_vs_",pariwised.combinations[i,2])
DEG <- FindMarkers(BS.spheroid, ident.1 = pariwised.combinations[i,1], ident.2 = pariwised.combinations[i,2],print.bar = T,logfc.threshold=0.0,random.seed = 12345)
DEG <- DEG %>% rownames_to_column("symbol") %>% mutate(ident.1_vs_ident.2=paste(combination),ident.1 = pariwised.combinations[i,1], ident.2 = pariwised.combinations[i,2])
patients_vs_patient <- rbind(patients_vs_patient,DEG)
}
saveRDS(patients_vs_patient,"BS_only_4Flo/patients_vs_patient_DEG.RDS",compress = "xz")
#patients_vs_patient %>% filter(p_val_adj<=0.05) %>% View()
# get average expression per patient in log10 + 1
avg.expression.cells <- log1p(AverageExpression(BS.spheroid, show.progress = T,add.ident="Individual_Sex"))
colnames(avg.expression.cells) <- paste0("donor_",colnames(avg.expression.cells))
head(avg.expression.cells)
write.csv(avg.expression.cells,"BS_only_4Flo/log1p_average_expression_per_patient.csv")
#Sanity check XIST
avg.expression.cells["XIST",] %>% t()%>% plot()
# scatter plots
ggplot(avg.expression.cells,aes(donor_1_X,donor_2_X))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
ggplot(avg.expression.cells,aes(donor_1_X,donor_3_Y))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
ggplot(avg.expression.cells,aes(donor_1_X,donor_4_Y))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
ggplot(avg.expression.cells,aes(donor_4_Y,donor_7_Y))+geom_point(size=0.3,alpha=0.5) + geom_abline(slope = 1,linetype="dotted")
BS_only_seurat <- readRDS("~/Dropbox/liverNetwork/data/Flo_data_BS_scRNA/BS_only_seurat.RDS")
BS = BS_only_seurat
p1 <- DimPlot(object = BS.spheroid, reduction.use = "cca", group.by = "stim",
pt.size = 0.5, do.return = TRUE)
p1 <- DimPlot(object = BS, reduction.use = "cca", group.by = "stim",
pt.size = 0.5, do.return = TRUE)
plot(p1)
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE,reduction.use = "cca)
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE,reduction.use = "cca")
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE)
BS <- RunPCA(BS, features = VariableFeatures(object = BS))
DimHeatmap(BS, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 2, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 2, cells = 100, balanced = TRUE)
DimHeatmap(BS, dims = 1:2, cells = 100, balanced = TRUE)
DimHeatmap(BS, dims = 1:2, cells = 200, balanced = TRUE)
DimHeatmap(BS, dims = 1:2, cells = 300, balanced = TRUE)
DimHeatmap(BS, dims = 5, cells = 300, balanced = TRUE)
DimHeatmap(BS, dims = 5, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 12, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 5000, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 1000, balanced = TRUE)
DimHeatmap(BS, dims = 1:12, cells = 800, balanced = TRUE)
DimHeatmap(BS, dims = 1:20, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 20, cells = 500, balanced = TRUE)
DimHeatmap(BS, dims = 20, cells = 500, balanced = TRUE,nfeatures=100)
DimHeatmap(BS, dims = 20, cells = 200, balanced = TRUE,nfeatures=100)
DimHeatmap(BS, dims = 20, cells = 400, balanced = TRUE,nfeatures=100)
DimHeatmap(BS, dims = 20, cells = 400, balanced = TRUE,nfeatures=60)
DimHeatmap(BS, dims = 20, cells = 400, balanced = TRUE,nfeatures=600)
fitBUM(pValuesH1vsH3,plot=TRUE)
library(scPPIN)
fitBUM(pValuesH1vsH3,plot=TRUE)
setwd("~/GitHub/shinyTutorial/R/shinyOPIG")
shiny::runApp()
getwd()
